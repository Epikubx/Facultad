package Parciales;

import tp02.ejercicio1.ListaDeEnterosEnlazada;
import tp02.ejercicio2.ListaEnlazadaGenerica;
import tp02.ejercicio2.ListaGenerica;
import tp03.ejercicio1.ArbolBinario;
import tp04.ejercicio1.ArbolGeneral;

public class Parcial_Ej3 {

	private static ArbolGeneral<Integer> arbol;
	
	public static void main(String[] args) {
		/*
		 *   Arbol Binario de Ejemplo:
		 * 
		 *           <- 41 ->
		 *    20               12
		 * 65    99        91      50
		 *          32          72    28
		 */
		ArbolBinario<Integer> arbol = new ArbolBinario<Integer>(41);
		arbol.agregarHijoIzquierdo(new ArbolBinario<Integer>(20));
		arbol.getHijoIzquierdo().agregarHijoIzquierdo(new ArbolBinario<Integer>(65));
		arbol.getHijoIzquierdo().agregarHijoDerecho(new ArbolBinario<Integer>(99));
		arbol.getHijoIzquierdo().getHijoDerecho().agregarHijoDerecho(new ArbolBinario<Integer>(32));
		arbol.agregarHijoDerecho(new ArbolBinario<Integer>(12));
		arbol.getHijoDerecho().agregarHijoIzquierdo(new ArbolBinario<Integer>(91));
		arbol.getHijoDerecho().agregarHijoDerecho(new ArbolBinario<Integer>(50));
		arbol.getHijoDerecho().getHijoDerecho().agregarHijoIzquierdo(new ArbolBinario<Integer>(72));
		arbol.getHijoDerecho().getHijoDerecho().agregarHijoDerecho(new ArbolBinario<Integer>(28));
		ListaGenerica<Integer> lista = resolver();
		lista.comenzar();
		while(!lista.fin()){
			System.out.println(lista.proximo());
		}
	}
	
	public Parcial_Ej3(ArbolGeneral<Integer> arbol){
		this.arbol = arbol;
	}
	
	public static ListaGenerica<Integer> resolver(){
		ListaEnlazadaGenerica<Integer> lista = new ListaEnlazadaGenerica<Integer>();
		resolver_helper(arbol, lista);
		return lista;
	}
	
	public static ListaGenerica<Integer> resolver_helper(ArbolGeneral<Integer> ab, ListaEnlazadaGenerica<Integer> lista){
		ListaEnlazadaGenerica<Integer> aux = new ListaEnlazadaGenerica<Integer>();
		ListaGenerica<ArbolGeneral<Integer>> hijos = arbol.getHijos();
		hijos.comenzar();
		while(!hijos.fin()){
			ListaGenerica<Integer> listaHijos = resolver_helper(hijos.proximo(), lista);
			if(hijos.tamanio() % 2 != 0){
				listaHijos.comenzar();
				while(!listaHijos.fin()){
					lista.agregarFinal(listaHijos.proximo());
				}
			}
		}
		aux.agregarFinal(ab.getDato());
		return lista;
	}
}
