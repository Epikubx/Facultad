package Practica6;

import tp02.ejercicio2.ListaEnlazadaGenerica;
import tp02.ejercicio2.ListaGenerica;
import tp06.ejercicio3.Arista;
import tp06.ejercicio3.Grafo;
import tp06.ejercicio3.Vertice;

public class visitaOslo {
	
	
	public ListaGenerica<String> paseoEnBici(Grafo<String> lugares,
			String destino, int maxTiempo, ListaGenerica<String> lugaresRestringidos){
		ListaGenerica<String> camino = new ListaEnlazadaGenerica<String>();
		boolean[] visitados = new boolean[lugares.listaDeVertices().tamanio()+1];
		Vertice<String> origen = buscarVertice(lugares, "Ayuntamiento");
		if(origen != null){
			process(lugares, origen, camino, destino, maxTiempo, lugaresRestringidos, visitados);
		}
		return camino;
	}
	
	private Vertice<String> buscarVertice(Grafo<String> lugares, String lugar){
		ListaGenerica<Vertice<String>> lis = lugares.listaDeVertices();
		lis.comenzar();
		while(!lis.fin()){
			Vertice<String> elem = lis.proximo();
			if(elem.dato().equals(elem.dato())){
				return elem;
			}
		}
		return null;
	}
	
	private boolean process(Grafo<String> lugares, Vertice<String> origen, ListaGenerica<String> camino, String destino, int maxTiempo, ListaGenerica<String> lugaresRestringidos, boolean[] visitados){
		if(visitados[origen.getPosicion()]){
			return false;
		}
		if(lugaresRestringidos.incluye(origen.dato())){
			return false;
		}
		if(maxTiempo < 0){
			return false;
		}
		boolean found = origen.dato().equals(destino);
		visitados[origen.getPosicion()] = true;
		if(!found){
			ListaGenerica<Arista<String>> ady = lugares.listaDeAdyacentes(origen);
			ady.comenzar();
			while(!ady.fin() && !found){
				Arista<String> arista = ady.proximo();
				found = process(lugares, arista.verticeDestino(), camino, destino, maxTiempo, lugaresRestringidos, visitados)
			}
		}
		return found;
	}
}
