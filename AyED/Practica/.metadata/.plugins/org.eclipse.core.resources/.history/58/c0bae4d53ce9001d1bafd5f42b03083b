package tp04.ejercicio1;

import tp02.ejercicio2.ListaEnlazadaGenerica;
import tp02.ejercicio2.ListaGenerica;
import tp02.ejercicio3.ColaGenerica;

public class ArbolGeneral<T> {

	private T dato;

	private ListaGenerica<ArbolGeneral<T>> hijos = new ListaEnlazadaGenerica<ArbolGeneral<T>>();

	public T getDato() {
		return dato;
	}

	public void setDato(T dato) {
		this.dato = dato;
	}

	public void setHijos(ListaGenerica<ArbolGeneral<T>> hijos) {
		if (hijos==null)
			this.hijos = new ListaEnlazadaGenerica<ArbolGeneral<T>>();
		else
			this.hijos = hijos;
	}

	public ArbolGeneral(T dato) {
		this.dato = dato;
	}

	public ArbolGeneral(T dato, ListaGenerica<ArbolGeneral<T>> hijos) {
		this(dato);
		if (hijos==null)
			this.hijos = new ListaEnlazadaGenerica<ArbolGeneral<T>>();
		else
			this.hijos = hijos;
	}

	public ListaGenerica<ArbolGeneral<T>> getHijos() {
		return this.hijos;
	}

	public void agregarHijo(ArbolGeneral<T> unHijo) {
		this.getHijos().agregarFinal(unHijo);
	}

	public boolean esHoja() {
		return !this.tieneHijos();
	}
	
	public boolean tieneHijos() {
		return !this.hijos.esVacia();
	}
	
	public boolean esVacio() {
		return this.dato == null && !this.tieneHijos();
	}

	public void eliminarHijo(ArbolGeneral<T> hijo) {
		if (this.tieneHijos()) {
			ListaGenerica<ArbolGeneral<T>> hijos = this.getHijos();
			if (hijos.incluye(hijo)) 
				hijos.eliminar(hijo);
		}
	}
	
	public Boolean esAncestro(T a, T b){
		if(this.getDato() == a || this.getDato() == b){
			return true;
		}
		boolean found_a = false;
		boolean found_b = false;
		hijos.comenzar();
		while(!hijos.fin() && !found_a){
			found_a = hijos.proximo().esAncestro(a, b);
			if(found_a){
				while(!hijos.fin() && !found_b){
					found_b = hijos.proximo().esAncestro(a, b);
				}
			}
		}
		if(found_a == found_b == false){
			return false;
		}
		return found_a && found_b;
	}
	
	public ArbolGeneral<T> buscarNodo(T dato){
		T data = this.getDato();
		if(data == dato){
			return this;
		}
		boolean retVal = false;
		while(!hijos.fin()){
			retVal = buscarNodo(dato);
		}
		return null;
	}
	
	public Integer altura() {
		int cant = 0;
		int max = -999;
		if(this.esHoja() || this.esVacio()){
			return 0;
		}
		hijos.comenzar();
		while(!hijos.fin()){
			cant = 1 + hijos.proximo().altura();
			if(cant > max){
				max = cant;
			}
		}
		return max;
	}

	public Integer nivel(T dato) {
		if(this.getDato() == dato){
			return 1;
		}
		boolean found = false;
		hijos.comenzar();
		while(!hijos.fin() && !found){
			int datoHijo = this.hijos.proximo().nivel(dato);
			if(datoHijo != -1){
				found = true;
				return datoHijo + 1;
			}
		}
		return -1;
	}

	public Integer ancho() {
		int max = -999;
		int cantHijosNivel = 0;
		ColaGenerica<ArbolGeneral<T>> cola = new ColaGenerica<ArbolGeneral<T>>();
		cola.encolar(this);
		cola.encolar(null);
		while(!cola.esVacia()){
			ArbolGeneral<T> elem = cola.desencolar();
			if(elem != null){
				cantHijosNivel++;
				ListaGenerica<ArbolGeneral<T>> hijos = elem.getHijos();
				hijos.comenzar();
				while(!hijos.fin()){
					cola.encolar(hijos.proximo());
				}
			}else if(!cola.esVacia()){
				if(cantHijosNivel > max){
					max = cantHijosNivel;
				}
				cantHijosNivel = 0;
				cola.encolar(null);
			}
		}
		return max;
	}
}